// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model User {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String?
  email             String          @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  password          String
  verificationToken String?         @unique
  resetToken        String?
  resetTokenExpiry  DateTime? // token validity
  roleId            String          @default(uuid())
  role              Role            @relation(fields: [roleId], references: [id])
  Authenticator     Authenticator[]
  addresses         Address[]
  payment           String
  cafes             Cafe[]          @relation("UserCafes")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String  @db.Uuid
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Cafe {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  subTitle   String?
  logo       String?
  openTime   String
  closeTime  String
  themeColor String
  isFeature  Boolean   @default(false)
  closed     Boolean   @default(false)
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  isActive   Boolean   @default(false)
  addresses  Address[]
  menus      Menu[]
  banner     Banner[]
  ownerId    String?   @db.Uuid
  owner      User?     @relation("UserCafes", fields: [ownerId], references: [id])
  // blogs      Blog[]    @relation("CafeBlogs")
  // reviews  Review[]
  // favorites    Favorite[]
  // folderItems  FolderItem[]
}

model Address {
  id        String   @id @default(uuid())
  street    String
  city      String
  state     String?
  zip       String?
  country   String
  map       String?
  isDefault Boolean  @default(false)
  cafeId    String   @db.Uuid
  cafe      Cafe     @relation(fields: [cafeId], references: [id])
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model Menu {
  id          String   @id @default(uuid())
  cafeId      String   @db.Uuid
  cafe        Cafe     @relation(fields: [cafeId], references: [id])
  name        String
  img         String?
  price       Float
  spicyRate   Int?
  ingredients String[]
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  // reviews  Review[]
}

// model Blog {
//   id         String   @id @default(uuid())
//   title      String
//   slug       String   @unique
//   authorId   String?  @db.Uuid
//   author     User?    @relation(fields: [authorId], references: [id])
//   content    String   // store rich text as plain string
//   coverImage String?
//   tags       String[]
//   cafes      Cafe[]   @relation("CafeBlogs")
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

model Banner {
  id         String    @id @default(uuid())
  cafe       Cafe      @relation(fields: [cafeId], references: [id])
  cafeId     String    @db.Uuid
  buttonText String
  link       String
  active     Boolean   @default(false)
  title      String?
  subtitle   String?
  imageUrl   String
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime  @default(now())
}
